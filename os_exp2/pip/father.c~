#include<stdio.h>
#include<sys/ipc.h>
#include<sys/types.h>
#include<semaphore.h>	
#include<fcntl.h>
#include "header.h"
int main()
{
	pid_t pid1,pid2,pid3;
	key_t key;
	//pip file describe,fd[0] is read,fd[1] is write
	int fd[2];
	char buff[BUFF_SIZE];
	sem_t* pi;	
	if(pipe(fd)<0)
	{
		printf("pipe error\n");
	}
	//dif file can share /p 
	pi = sem_open("/p",O_CREAT|O_EXCL, S_IRUSR|S_IWUSR,1);
	if(pi==SEM_FAILED)
	{
		printf("sem_open errer\n");
		return 0;
	}
	if((pid1=fork())<0)
	{
		printf("fork error\n");
	}
	else if(pid1==0)
	{
		sem_t* pi_child = sem_open("/p",0);
		if(pi_child == SEM_FAILED)
		{
			perror("sem_open in child");
			return -1;
		}
		printf("p1 send message\n");
		close(fd[0]);
		printf("p1 send %d bytes data\n",write1(fd[1]));
		close(fd[1]);
		sem_post(pi_child);
		sem_close(pi_child);
		return 0;
	}
	if((pid2=fork())<0)
	{
		printf("fork error\n");
	}
	else if(pid2==0)
	{
		sem_t* pi_child = sem_open("/p",0);
		if(pi_child == SEM_FAILED)
		{
			perror("sem_open in child");
			return -1;
		}

		printf("p2 send message\n");
		sem_wait(pi_child);
		close(fd[0]);
		printf("p2 send %d bytes data\n",write2(fd[1]));
		close(fd[1]);
		sem_post(pi_child);
		sem_close(pi_child);
		return 0;
	}
	if((pid3=fork())<0)
	{
		printf("fork error\n");
	}
	else if(pid3==0)
	{
		sem_t* pi_child = sem_open("/p",0);
		if(pi_child == SEM_FAILED)
		{
			perror("sem_open in child");
			return -1;
		}

		printf("p3 send message\n");
		sem_wait(pi_child);
		close(fd[0]);
		printf("p3 send %d bytes data\n",write3(fd[1]));
		close(fd[1]);
		sem_post(pi_child);
		sem_close(pi_child);
		return 0;
	}
	waitpid(pid1,NULL,0);
	waitpid(pid2,NULL,0);
	waitpid(pid3,NULL,0);
	close(fd[1]);
	int n = read(fd[0],buff,BUFF_SIZE);
	printf("%s",buff);
	printf("\n");
	printf("receive %d bytes\n",n);
	sem_unlink("/p");
	return 0;
}
